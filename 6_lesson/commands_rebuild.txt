/* 1. Покажите информацию по потокам. В отчет выведите номер потока, название курса и дату начала занятий */

SELECT streams.number, streams.started_at, courses.name AS 'course'
FROM streams INNER JOIN courses
ON streams.course_id = courses.id;

/* 2. Найдите общее количество учеников для каждого курса. В отчёт выведите название курса и количество учеников
по всем потокам курса */

SELECT SUM(streams.students_amount),
courses.name AS 'course'
FROM courses LEFT JOIN streams /* левой таблицей должна быть таблица курсов*/
ON streams.course_id = courses.id
GROUP BY courses.id; /*добавлена группировка по курсам, так как необходимо подсчитать общее количество учеников
для каждого курса*/


/* 3. Для всех учителей найдите среднюю оценку по всем проведённым потокам. В отчёт выведите идентификатор,
фамилию и имя учителя, среднюю оценку по всем проведенным потокам. Важно чтобы учителя,
у которых не было потоков, также попали в выборку */

SELECT id, surname ||' '|| name AS 'teacher',
AVG(performance) AS 'av_perform'
FROM
teachers LEFT JOIN grades ON teachers.id = teacher_id /*левой должна быть таблица преподавателей*/
GROUP BY teachers.id; 

/*Вариант с группировкой по grades.teacher_id в SQLite работает, однако преподаватели
без потоков и, соответсвенно, оценок будут выведены в начале/случайном месте итоговой отчетной таблицы
*/

SELECT id, surname ||' '|| name AS 'teacher',
AVG(performance) AS 'av_perform'
FROM
teachers LEFT JOIN grades ON teachers.id = teacher_id
GROUP BY teacher_id;

/* 4. Финальный вариант решения. Не удалось прикрутить LEAD(started_at)
Постоянно возникала ошибка злоупотребления оконной фунцией "misuse of window function" */

SELECT teachers.name ||' '|| teachers.surname AS teacher,
MIN(performance) AS mini,
MAX(performance) AS maxi,
course
FROM grades
INNER JOIN teachers ON teachers.id = teacher_id
INNER JOIN
(SELECT courses.name AS course, teacher_id AS t_id
FROM
streams 
JOIN courses ON course_id = courses.id JOIN grades ON streams.id = grades.stream_id)
ON teacher_id = t_id
GROUP BY teacher; 

/*Попытки разложить запрос на динамические таблицы*/

SELECT courses.name AS course, performance
FROM
streams 
JOIN courses ON course_id = courses.id JOIN grades ON streams.id = grades.stream_id;
/* выдает имя курса и успеваемость по нему*/


SELECT teacher_id, MIN(performance) AS mini, MAX(performance) AS maxi FROM grades GROUP BY stream_id; 
/*выдает ID преподавателя и макс/мин успеваемость у этого преподавателя.*/

SELECT teacher_id, teachers.name ||' '|| teachers.surname, MIN(performance) AS mini, MAX(performance) AS maxi FROM grades
JOIN teachers ON teachers.id = teacher_id GROUP BY teacher_id;
/* выдает id, имя преподавателя и его макс/мин успеваемость */

SELECT surname ||' '|| name AS 'teacher', performance
FROM grades JOIN teachers ON teachers.id = teacher_id GROUP BY stream_id ;
/* выдает преподавателя по имени и его успеваемость на всех потоках*/

